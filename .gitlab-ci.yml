workflow:
  name: TodoApp CI/CD Pipeline
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature\/.*/'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

variables:
  NODE_VERSION: "18"
  NPM_CONFIG_CACHE: "/tmp/npm-cache"

stages:
  - build
  - test
  - security-scan  # Optional: Add security scanning
  - deploy  # For future deployment stages

# Cache template for reusability
.node_cache_template: &node_cache
  cache:
    key: ${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull-push

before_script:
  - apk add --no-cache bash curl git
  - npm config set cache ${NPM_CONFIG_CACHE} --global

build-frontend:
  stage: build
  image: node:${NODE_VERSION}-alpine
  script: 
    - cd frontend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm run build
    - echo "Frontend build completed successfully"
  artifacts:
    when: on_success
    expire_in: "1 day"
    paths:
      - frontend/dist/
  cache:
    key: frontend-${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
    policy: pull-push
  
build-backend:
  stage: build
  image: node:${NODE_VERSION}-alpine
  script: 
    - cd backend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - echo "Backend dependencies installed successfully"
    # Add any backend build steps if needed
  artifacts:
    when: on_success
    expire_in: "1 day"
    paths:
      - backend/
    exclude:
      - backend/node_modules/
  cache:
    key: backend-${CI_COMMIT_REF_SLUG}
    paths:
      - backend/node_modules/
    policy: pull-push

test-frontend:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build-frontend
  script:
    - cd frontend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm test -- --coverage --watchAll=false --ci
  artifacts:
    when: always
    expire_in: "1 week"
    paths:
      - frontend/junit.xml
      - frontend/coverage/
    reports:
      junit: frontend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
  cache:
    key: frontend-${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
    policy: pull
  coverage: '/Lines\s*:\s*(\d+\.?\d*)%/'
  allow_failure: true

test-backend:
  stage: test
  image: node:${NODE_VERSION}-alpine
  timeout: 2min
  dependencies:
    - build-backend
  script:
    - cd backend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm test -- --forceExit --coverage
  artifacts:
    when: always
    expire_in: "1 week"
    paths:
    - backend/junit.xml
    reports:
      junit: backend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage/cobertura-coverage.xml
  cache:
    key: backend-${CI_COMMIT_REF_SLUG}
    paths:
      - backend/node_modules/
    policy: pull
  coverage: '/Lines\s*:\s*(\d+\.?\d*)%/'
