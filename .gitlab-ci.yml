workflow:
  name: TodoApp CI/CD Pipeline
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature\/.*/'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

variables:
  NODE_VERSION: "18"
  NPM_CONFIG_CACHE: "/tmp/npm-cache"
  # Docker-specific global variables (non-sensitive)
  FRONTEND_IMAGE: $DOCKERHUB_USER/todo-app-frontend
  BACKEND_IMAGE: $DOCKERHUB_USER/todo-app-backend
  TAG: $CI_COMMIT_SHORT_SHA  # Tags with commit SHA for traceability ; alternative: $CI_PIPELINE_ID
stages:
  - build
  - test
  - docker-build
  - docker-test
  - docker-push


#Cache template for reusability
.node_cache_template: &node_cache
  cache:
    key: ${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull-push


before_script:
  #- apk add --no-cache bash curl git
  - npm config set cache ${NPM_CONFIG_CACHE} --global

build-frontend:
  stage: build
  image: node:${NODE_VERSION}-alpine
  tags:
    - macos
    - shell
  script: 
    - cd frontend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm run build
    - echo "Frontend build completed successfully"
  artifacts:
    when: on_success
    expire_in: "1 day"
    paths:
      - frontend/dist/
  cache:
    key: frontend-${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
    policy: pull-push
  
build-backend:
  stage: build
  image: node:${NODE_VERSION}-alpine
  tags:
    - macos
    - shell
  script: 
    - cd backend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - echo "Backend dependencies installed successfully"
    # Add any backend build steps if needed
  artifacts:
    when: on_success
    expire_in: "1 day"
    paths:
      - backend/
    exclude:
      - backend/node_modules/
  cache:
    key: backend-${CI_COMMIT_REF_SLUG}
    paths:
      - backend/node_modules/
    policy: pull-push

test-frontend:
  stage: test
  image: node:${NODE_VERSION}-alpine
  tags:
    - macos
    - shell
  dependencies:
    - build-frontend
  script:
    - cd frontend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm run test:ci
  artifacts:
    when: always
    expire_in: "1 week"
    paths:
      - frontend/junit.xml
      - frontend/coverage/
    reports:
      junit: frontend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
  cache:
    key: frontend-${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
    policy: pull
  coverage: '/Lines\s*:\s*(\d+\.?\d*)%/'
  allow_failure: true

test-backend:
  stage: test
  image: node:${NODE_VERSION}-alpine
  tags:
    - macos
    - shell
  timeout: 5min
  dependencies:
    - build-backend
  script:
    - cd backend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm run test:ci 
  artifacts:
    when: always
    expire_in: "1 week"
    paths:
    - backend/junit.xml
    reports:
      junit: backend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage/cobertura-coverage.xml
  cache:
    key: backend-${CI_COMMIT_REF_SLUG}
    paths:
      - backend/node_modules/
    policy: pull
  coverage: '/Lines\s*:\s*(\d+\.?\d*)%/'

docker-build-frontend:
  stage: docker-build
  tags:
    - macos
    - shell
  before_script:
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
  script:
    - docker build -t $FRONTEND_IMAGE:$TAG frontend/ || { echo "Frontend build failed"; exit 1; }   # Build with SHA tag; added error handling
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then docker tag $FRONTEND_IMAGE:$TAG $FRONTEND_IMAGE:latest; fi 
  needs:
    - build-frontend
  dependencies:
    - build-frontend
  
docker-build-backend:
  stage: docker-build
  tags:
    - macos
    - shell
  before_script:
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
  script:
    - docker build -t $BACKEND_IMAGE:$TAG backend/ || { echo "Backend build failed"; exit 1; }  # Build with SHA tag; added error handling
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then docker tag $BACKEND_IMAGE:$TAG $BACKEND_IMAGE:latest; fi 
  needs:
    - build-backend
  dependencies:
    - build-backend

docker-test-frontend:
  stage: docker-test
  tags:
    - macos
    - shell
  before_script:
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
  script:
    - docker run --rm $FRONTEND_IMAGE:$TAG echo "Frontend container starts successfully" || exit 1 
  needs:
    - docker-build-frontend
  dependencies:
    - docker-build-frontend

docker-test-backend:
  stage: docker-test
  tags:
    - macos
    - shell
  before_script:
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
  script:
    - docker run -d --name backend_test -p 3001:3001 $BACKEND_IMAGE:$TAG || exit 1  # Run detached
    - sleep 10  # Wait for startup
    - curl -f http://localhost:3001/health || { echo "Backend health check failed"; exit 1; }  # Health check
    - docker stop backend_test  # Cleanup
  needs:
    - docker-build-backend
  dependencies:
    - docker-build-backend

docker-push-frontend:
  stage: docker-push
  tags:
    - macos
    - shell
  before_script:
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
  script:
    - docker push $FRONTEND_IMAGE:$TAG || exit 1
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then docker push $FRONTEND_IMAGE:latest; fi  # Push :latest only on main
  needs:
    - docker-test-frontend  # Ensures tests pass
  dependencies:
    - docker-test-frontend
  
docker-push-backend:
  stage: docker-push
  tags:
    - macos
    - shell
  before_script:
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
  script:
    - docker push $BACKEND_IMAGE:$TAG || exit 1
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then docker push $BACKEND_IMAGE:latest; fi
  needs:
    - docker-test-backend
  dependencies:
    - docker-test-backend