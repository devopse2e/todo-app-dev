workflow:
  name: TodoApp CI/CD Pipeline
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature\/.*/'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

variables:
  GIT_STRATEGY: fetch
  GIT_CLEAN_FLAGS: -ffdx -e !.gitignore
  NODE_VERSION: "18"
  NPM_CONFIG_CACHE: "/tmp/npm-cache"
  # Docker-specific global variables (non-sensitive)
  FRONTEND_IMAGE: $DOCKERHUB_USER/todo-app-frontend
  BACKEND_IMAGE: $DOCKERHUB_USER/todo-app-backend
  TAG: $CI_COMMIT_SHORT_SHA  # Tags with commit SHA for traceability;test alternative: $CI_PIPELINE_ID
  K8S_CONTEXT: kubernetes-the-hard-way
  K8S_NAMESPACE: todo-app
  K8S_MANIFEST_DIR: k8s/
  FULL_CONTEXT: "$CI_PROJECT_PATH:$K8S_CONTEXT" 

stages:
  - build
  - test
  - docker-build
  - docker-test
  - docker-push
  - deploy


#Cache template for reusability
.node_cache_template: &node_cache
  cache:
    key: ${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull-push


before_script:
  #- apk add --no-cache bash curl git
  - rm -rf .tmp/ || true  # Target the problematic .tmp dir
  - rm -rf backend/node_modules frontend/node_modules || true
  - rm -rf frontend/dist || true
  - sleep 10
  - npm config set cache ${NPM_CONFIG_CACHE} --global
  - rm -rf $CI_PROJECT_DIR/*.tmp/ || true  # Safely remove temp dirs
build-frontend:
  stage: build
  image: node:${NODE_VERSION}-alpine
  resource_group: build
  tags:
    - macos
    - shell
  script: 
    - cd frontend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm run build
    - echo "Frontend build completed successfully"
  artifacts:
    when: on_success
    expire_in: "1 day"
    paths:
      - frontend/dist/
  cache:
    key: frontend-${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
    policy: pull-push
  
build-backend:
  stage: build
  image: node:${NODE_VERSION}-alpine
  resource_group: build
  needs:
    - build-frontend
  tags:
    - macos
    - shell
  before_script:
    - rm -rf frontend/ backend/node_modules || true  
  script: 
    - cd backend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - echo "Backend dependencies installed successfully"
    # Add any backend build steps if needed
  artifacts:
    when: on_success
    expire_in: "1 day"
    paths:
      - backend/
    exclude:
      - backend/node_modules/
  cache:
    key: backend-${CI_COMMIT_REF_SLUG}
    paths:
      - backend/node_modules/
    policy: pull

test-frontend:
  stage: test
  image: node:${NODE_VERSION}-alpine
  tags:
    - macos
    - shell
  dependencies:
    - build-frontend
  script:
    - cd frontend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm run test:ci
  artifacts:
    when: always
    expire_in: "1 week"
    paths:
      - frontend/junit.xml
      - frontend/coverage/
    reports:
      junit: frontend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
  cache:
    key: frontend-${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
    policy: pull
  coverage: '/Lines\s*:\s*(\d+\.?\d*)%/'
  allow_failure: true

test-backend:
  stage: test
  image: node:${NODE_VERSION}-alpine
  needs:
    - build-backend
  tags:
    - macos
    - shell
  dependencies:
    - build-backend
  script:
    - cd backend
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm run test:ci 
    - sleep 20
  artifacts:
    when: always
    expire_in: "1 week"
    paths:
    - backend/junit.xml
    - backend/coverage/
    reports:
      junit: backend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage/cobertura-coverage.xml
  cache:
    key: backend-${CI_COMMIT_REF_SLUG}
    paths:
      - backend/node_modules/
    policy: pull
  coverage: '/Lines\s*:\s*(\d+\.?\d*)%/'
  retry: 2

docker-build-frontend:
  stage: docker-build
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - docker build -t $FRONTEND_IMAGE:$TAG frontend/ || { echo "Frontend build failed"; exit 1; }   # Build with SHA tag; added error handling
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then docker tag $FRONTEND_IMAGE:$TAG $FRONTEND_IMAGE:latest; fi 
  needs:
    - build-frontend
  dependencies:
    - build-frontend
  retry: 2
  
docker-build-backend:
  stage: docker-build
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - docker build -t $BACKEND_IMAGE:$TAG backend/ || { echo "Backend build failed"; exit 1; }  # Build with SHA tag; added error handling
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then docker tag $BACKEND_IMAGE:$TAG $BACKEND_IMAGE:latest; fi 
  needs:
    - build-backend
  dependencies:
    - build-backend
  retry: 2

docker-test-frontend:
  stage: docker-test
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - docker run --rm $FRONTEND_IMAGE:$TAG echo "Frontend container starts successfully" || exit 1 
  needs:
    - docker-build-frontend
  dependencies:
    - docker-build-frontend

docker-test-backend:
  stage: docker-test
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - docker run -d --name backend_test -p 3001:3001 $BACKEND_IMAGE:$TAG || exit 1
    - sleep 10  # Increase to 10s for slower startups
    - docker ps | grep backend_test || { echo "Container not running"; exit 1; }  # Check if up
    - curl -f http://localhost:3001/health --retry 3 --retry-delay 2 || { echo "Backend health check failed"; exit 1; }  # Add retries
    - docker logs backend_test  # Log for debugging
    - docker stop backend_test
    - docker rm backend_test  # Clean up
  needs:
    - docker-build-backend
    - test-backend
  dependencies:
    - docker-build-backend

docker-push-frontend:
  stage: docker-push
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - docker push $FRONTEND_IMAGE:$TAG || exit 1
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then docker push $FRONTEND_IMAGE:latest; fi  # Push :latest only on main
  needs:
    - docker-test-frontend  # Ensures tests pass
  dependencies:
    - docker-test-frontend
  
docker-push-backend:
  stage: docker-push
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - docker push $BACKEND_IMAGE:$TAG || exit 1
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then docker push $BACKEND_IMAGE:latest; fi
  needs:
    - docker-test-backend
  dependencies:
    - docker-test-backend

deploy-k8s:
  stage: deploy
  image: bitnami/kubectl:latest   # Use a Helm image for installation
  tags:
    - macos
    - shell
  before_script:
    - apk update && apk add --no-cache bash curl  # Install kubectl and dependencies
  script:
    - echo "Setting up kubeconfig"
    - mkdir -p ~/.kube
    - echo "$KUBECONFIG_CONTENT"
    - echo "$KUBECONFIG_CONTENT" | base64 -d > ~/.kube/config || { echo "Decoding failed"; exit 1; }  # Add error handling
    - kubectl config view  # Debug: Output the full config for logs
    - kubectl config get-contexts  # Debug: List available contexts
    - kubectl config use-context $FULL_CONTEXT || { echo "Context not found"; exit 1; }  # Hardcode for testing; replace with $K8S_CONTEXT later
    - echo "Installing/Upgrading NGINX Ingress Controller with webhook disabled"
    - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    - helm repo update
    - helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace --set controller.admissionWebhooks.enabled=false || { echo "Helm upgrade failed"; exit 1; }  # Disable webhook
    - echo "Deploying app manifests"
    - kubectl create namespace $K8S_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    - kubectl apply -f $K8S_MANIFEST_DIR 
    - kubectl rollout status deployment/frontend-deployment --namespace $K8S_NAMESPACE --timeout=2m
    - kubectl rollout status deployment/backend-deployment --namespace $K8S_NAMESPACE --timeout=2m
  needs:
    - docker-push-frontend
    - docker-push-backend
  only:
    - main
  environment:
    name: development
    url: http://todo-app.local
  #rules:
   # - when: never
  
